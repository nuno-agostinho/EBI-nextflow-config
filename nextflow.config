/*
========================================================================================
    EMBL-EBI community developed Nextflow config
========================================================================================
    Default config options for all compute environments
----------------------------------------------------------------------------------------
*/

params {
    // Boilerplate options
    outdir                     = null
    publish_dir_mode           = 'copy'

    // Max resource options
    // Defaults only, expecting to be overwritten
    max_memory                 = 100.GB
    max_cpus                   = 48
    max_time                   = 168.h
}

env {

}

process {
    withLabel:process_datamover {
        queue = 'datamover'
    }

    withLabel:error_ignore {
        errorStrategy = 'ignore'
    }
}

profiles {
    standard {
        process {
            executor = 'local'
            errorStrategy = 'finish'
        }
    }

    lsf {
        process {
            executor = 'lsf'
            perJobMemLimit = true
            errorStrategy = 'finish'

            cpus = 1
            memory = 1.GB

            withLabel: 'local' {
                executor = 'local'
            }
        }
    }

    slurm {
        process {
            executor = 'slurm'
            perJobMemLimit = true
            errorStrategy = 'finish'

            cpus = 1
            memory = 1.GB
            time = 60.min
            
            withLabel: 'local' {
                executor = 'local'
            }
        }
    }
  
  docker {
      docker.enabled = true
  }

  singularity {
    singularity.enabled = true
    singularity.autoMounts = true
  }
  
  email {
    notification.enabled = true
    notification.to = "${USER}@ebi.ac.uk"
  }
}

// Load custom.config - commented example
//includeConfig 'conf/custom.config'

// Preform work directory cleanup after a successful run
cleanup = true

manifest {
    name            = 'EBI-nextflow-config'
    author          = 'EMBL-EBI'
    homePage        = 'https://www.ebi.ac.uk'
    description     = 'EMBL-EBI community developed Nextflow config'
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
